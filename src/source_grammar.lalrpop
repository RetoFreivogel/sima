use source_ast::*;

grammar;

match{
    r"[fiu][1-9][0-9]*" => SIMPLETYPE,
}else{
    "module",
    "opaque",
    "dup",
    "drop",
    "swap",
    "id",
    "::",
    "->",
    "=",
    ",",
    "*",
    ";",
    "(",
    ")",
    "[",
    "]",
    r#""[^"]*""#            => STRINGLITERAL,
    r"[a-zA-Z][0-9a-zA-Z]*" => IDENTIFIER,
    r"-?[0-9][0-9]*"        => NUMBER,
    r"\\\\.*\n"             => COMMENT,
}



pub Module: Module = {
    <m:Module> <id: IDENTIFIER> "=" <expr: Concat> ";" => {
        let mut m = m;
        m.add_definition(id, expr);
        m
    },
    <m:Module> <id: IDENTIFIER> "::" <sima_type: FunctionType> ";" => {
        let mut m = m; 
        m.add_declaration(id, sima_type);
        m
    },
    "module" <id:IDENTIFIER> ";" => Module::new(id),
};

FunctionType: SimaType = {
    <args: PointerType*> "->" <ret: PointerType*> => SimaType::Function{args, ret},
    PointerType,
};

PointerType: SimaType = {
    <target: BasicType> "*" => SimaType::Pointer{target: Box::new(target)},
    BasicType,
};

BasicType: SimaType = {
    <id: SIMPLETYPE> => SimaType::Basic{id: id.to_string()},
    "opaque"         => SimaType::Opaque,
};

Concat : Expression = {
    <left:Concat> <right:Sidecat> => 
        Expression::Concat{left: Box::new(left), right: Box::new(right)},
    Sidecat,
};

Sidecat : Expression = {
    <left:Sidecat> "," <right:Symbol> => 
        Expression::Sidecat{left: Box::new(left), right: Box::new(right)},
    Symbol,
};

Symbol : Expression = {
    "(" <Concat> ")",
    "[" <inner: Concat> "]" => Expression::Block{inner: Box::new(inner)},

    "dup"  => Expression::Duplicate,
    "drop" => Expression::Discard,
    "swap" => Expression::Exchange,
    "id"   => Expression::Keep,

    STRINGLITERAL   => Expression::StringLiteral(<>.to_string()),
    NUMBER          => Expression::Number(<>.to_string()),
    <id:IDENTIFIER> => Expression::Identifier{id: id.to_string(), in_ariety: 0, out_ariety: 0},
};

